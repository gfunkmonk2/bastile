/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_bastile_service_keyset_MARSHAL_H__
#define __dbus_glib_marshal_bastile_service_keyset_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_char (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* BOOLEAN:STRING,BOXED,POINTER,POINTER (/tmp/dbus-binding-tool-c-marshallers.3TH3SU:1) */
extern void dbus_glib_marshal_bastile_service_keyset_BOOLEAN__STRING_BOXED_POINTER_POINTER (GClosure     *closure,
                                                                                             GValue       *return_value,
                                                                                             guint         n_param_values,
                                                                                             const GValue *param_values,
                                                                                             gpointer      invocation_hint,
                                                                                             gpointer      marshal_data);
void
dbus_glib_marshal_bastile_service_keyset_BOOLEAN__STRING_BOXED_POINTER_POINTER (GClosure     *closure,
                                                                                 GValue       *return_value G_GNUC_UNUSED,
                                                                                 guint         n_param_values,
                                                                                 const GValue *param_values,
                                                                                 gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                 gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_BOXED_POINTER_POINTER) (gpointer     data1,
                                                                          gpointer     arg_1,
                                                                          gpointer     arg_2,
                                                                          gpointer     arg_3,
                                                                          gpointer     arg_4,
                                                                          gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_BOXED_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_BOXED_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_boxed (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:BOXED,INT,POINTER,POINTER (/tmp/dbus-binding-tool-c-marshallers.3TH3SU:2) */
extern void dbus_glib_marshal_bastile_service_keyset_BOOLEAN__BOXED_INT_POINTER_POINTER (GClosure     *closure,
                                                                                          GValue       *return_value,
                                                                                          guint         n_param_values,
                                                                                          const GValue *param_values,
                                                                                          gpointer      invocation_hint,
                                                                                          gpointer      marshal_data);
void
dbus_glib_marshal_bastile_service_keyset_BOOLEAN__BOXED_INT_POINTER_POINTER (GClosure     *closure,
                                                                              GValue       *return_value G_GNUC_UNUSED,
                                                                              guint         n_param_values,
                                                                              const GValue *param_values,
                                                                              gpointer      invocation_hint G_GNUC_UNUSED,
                                                                              gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__BOXED_INT_POINTER_POINTER) (gpointer     data1,
                                                                       gpointer     arg_1,
                                                                       gint         arg_2,
                                                                       gpointer     arg_3,
                                                                       gpointer     arg_4,
                                                                       gpointer     data2);
  register GMarshalFunc_BOOLEAN__BOXED_INT_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__BOXED_INT_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_boxed (param_values + 1),
                       g_marshal_value_peek_int (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:BOXED,INT,POINTER,POINTER,POINTER (/tmp/dbus-binding-tool-c-marshallers.3TH3SU:3) */
extern void dbus_glib_marshal_bastile_service_keyset_BOOLEAN__BOXED_INT_POINTER_POINTER_POINTER (GClosure     *closure,
                                                                                                  GValue       *return_value,
                                                                                                  guint         n_param_values,
                                                                                                  const GValue *param_values,
                                                                                                  gpointer      invocation_hint,
                                                                                                  gpointer      marshal_data);
void
dbus_glib_marshal_bastile_service_keyset_BOOLEAN__BOXED_INT_POINTER_POINTER_POINTER (GClosure     *closure,
                                                                                      GValue       *return_value G_GNUC_UNUSED,
                                                                                      guint         n_param_values,
                                                                                      const GValue *param_values,
                                                                                      gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                      gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__BOXED_INT_POINTER_POINTER_POINTER) (gpointer     data1,
                                                                               gpointer     arg_1,
                                                                               gint         arg_2,
                                                                               gpointer     arg_3,
                                                                               gpointer     arg_4,
                                                                               gpointer     arg_5,
                                                                               gpointer     data2);
  register GMarshalFunc_BOOLEAN__BOXED_INT_POINTER_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__BOXED_INT_POINTER_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_boxed (param_values + 1),
                       g_marshal_value_peek_int (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER,POINTER (/tmp/dbus-binding-tool-c-marshallers.3TH3SU:4) */
extern void dbus_glib_marshal_bastile_service_keyset_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                                                GValue       *return_value,
                                                                                guint         n_param_values,
                                                                                const GValue *param_values,
                                                                                gpointer      invocation_hint,
                                                                                gpointer      marshal_data);
void
dbus_glib_marshal_bastile_service_keyset_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                                    GValue       *return_value G_GNUC_UNUSED,
                                                                    guint         n_param_values,
                                                                    const GValue *param_values,
                                                                    gpointer      invocation_hint G_GNUC_UNUSED,
                                                                    gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER_POINTER) (gpointer     data1,
                                                             gpointer     arg_1,
                                                             gpointer     arg_2,
                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,STRING,POINTER,POINTER,POINTER (/tmp/dbus-binding-tool-c-marshallers.3TH3SU:5) */
extern void dbus_glib_marshal_bastile_service_keyset_BOOLEAN__STRING_STRING_POINTER_POINTER_POINTER (GClosure     *closure,
                                                                                                      GValue       *return_value,
                                                                                                      guint         n_param_values,
                                                                                                      const GValue *param_values,
                                                                                                      gpointer      invocation_hint,
                                                                                                      gpointer      marshal_data);
void
dbus_glib_marshal_bastile_service_keyset_BOOLEAN__STRING_STRING_POINTER_POINTER_POINTER (GClosure     *closure,
                                                                                          GValue       *return_value G_GNUC_UNUSED,
                                                                                          guint         n_param_values,
                                                                                          const GValue *param_values,
                                                                                          gpointer      invocation_hint G_GNUC_UNUSED,
                                                                                          gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_STRING_POINTER_POINTER_POINTER) (gpointer     data1,
                                                                                   gpointer     arg_1,
                                                                                   gpointer     arg_2,
                                                                                   gpointer     arg_3,
                                                                                   gpointer     arg_4,
                                                                                   gpointer     arg_5,
                                                                                   gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_STRING_POINTER_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_STRING_POINTER_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

G_END_DECLS

#endif /* __dbus_glib_marshal_bastile_service_keyset_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_bastile_service_keyset_methods[] = {
  { (GCallback) bastile_service_keyset_list_keys, dbus_glib_marshal_bastile_service_keyset_BOOLEAN__POINTER_POINTER, 0 },
  { (GCallback) bastile_service_keyset_get_key_field, dbus_glib_marshal_bastile_service_keyset_BOOLEAN__STRING_STRING_POINTER_POINTER_POINTER, 50 },
  { (GCallback) bastile_service_keyset_get_key_fields, dbus_glib_marshal_bastile_service_keyset_BOOLEAN__STRING_BOXED_POINTER_POINTER, 132 },
  { (GCallback) bastile_service_keyset_discover_keys, dbus_glib_marshal_bastile_service_keyset_BOOLEAN__BOXED_INT_POINTER_POINTER, 209 },
  { (GCallback) bastile_service_keyset_match_keys, dbus_glib_marshal_bastile_service_keyset_BOOLEAN__BOXED_INT_POINTER_POINTER_POINTER, 285 },
};

const DBusGObjectInfo dbus_glib_bastile_service_keyset_object_info = {
  0,
  dbus_glib_bastile_service_keyset_methods,
  5,
"org.mate.bastile.Keys\0ListKeys\0S\0keys\0O\0F\0N\0as\0\0org.mate.bastile.Keys\0GetKeyField\0S\0key\0I\0s\0field\0I\0s\0has\0O\0F\0N\0b\0info\0O\0F\0N\0v\0\0org.mate.bastile.Keys\0GetKeyFields\0S\0key\0I\0s\0fields\0I\0as\0info\0O\0F\0N\0a{sv}\0\0org.mate.bastile.Keys\0DiscoverKeys\0S\0keyids\0I\0as\0flags\0I\0i\0keys\0O\0F\0N\0as\0\0org.mate.bastile.Keys\0MatchKeys\0S\0patterns\0I\0as\0flags\0I\0i\0keys\0O\0F\0N\0as\0unmatched\0O\0F\0N\0as\0\0\0",
"org.mate.bastile.Keys\0KeyAdded\0org.mate.bastile.Keys\0KeyRemoved\0org.mate.bastile.Keys\0KeyChanged\0\0",
"\0"
};
